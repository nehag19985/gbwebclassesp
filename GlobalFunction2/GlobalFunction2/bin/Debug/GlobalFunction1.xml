<?xml version="1.0"?>
<doc>
<assembly>
<name>
GlobalFunction1
</name>
</assembly>
<members>
<member name="P:GlobalFunction1.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:GlobalFunction1.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:GlobalFunction1.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToResourceFile(System.Collections.Hashtable,System.String)">
	<summary>
 To add resources to *.resx file from a hash table. 
 </summary>
	<param name="ResourceEntries">Resource Entries as hash table , where key as name, and value as content</param>
	<param name="ResourceFilePath">Full path Name of resource file</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetItemFromResources(System.String,System.String)">
	<summary>
 Get item from resources (resx) file
 </summary>
	<param name="KeyName">Key name of resource to be found</param>
	<param name="ResourceFilePath">Full path Name of resource file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.String[]@,System.String,System.Boolean,System.Boolean)">
	<summary>
 Add string element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">string element added at last position </param>
	<returns> Output array after adding new string </returns>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoArrays(System.String[]@,System.String[],System.Boolean,System.Boolean)">
	<summary>
 Add Two arrays of string elements
 </summary>
	<param name="FirstArray"> FirstArray to be added</param>
	<param name="SecondArray ">Second Array to be added </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoArrays(System.Int32[]@,System.Int32[],System.Boolean)">
	<summary>
 Add Two arrays of integer elements
 </summary>
	<param name="FirstArray"> FirstArray to be added</param>
	<param name="SecondArray ">Second Array to be added </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoArrays(System.Decimal[]@,System.Decimal[],System.Boolean)">
	<summary>
 Add Two arrays of decimal elements
 </summary>
	<param name="FirstArray"> FirstArray to be added</param>
	<param name="SecondArray ">Second Array to be added </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoArrays(System.Object[]@,System.Object[],System.Boolean)">
	<summary>
 Add Two arrays of object elements
 </summary>
	<param name="FirstArray"> FirstArray to be added</param>
	<param name="SecondArray ">Second Array to be added </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoHashTable(System.Collections.Hashtable@,System.Collections.Hashtable,System.Boolean)">
	<summary>
 Add Two HashTables  
 </summary>
	<param name="FirstHashTable"> FirstHashTable to be added</param>
	<param name="SecondHashTable ">SecondHashTable to be added </param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoArrays(System.IO.FileInfo[]@,System.IO.FileInfo[],System.Boolean)">
	<summary>
 Add Two arrays of fileinfo elements
 </summary>
	<param name="FirstArray"> FirstArray to be added</param>
	<param name="SecondArray ">Second Array to be added </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddTwoArrays(Microsoft.VisualBasic.Collection[]@,Microsoft.VisualBasic.Collection[],System.Boolean)">
	<summary>
 Add Two arrays of Collection elements
 </summary>
	<param name="FirstArray"> FirstArray to be added</param>
	<param name="SecondArray ">Second Array to be added </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after addition </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Int32[]@,System.Int32,System.Boolean)">
	<summary>
 Add an integer element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">Integer element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new integer </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Decimal[]@,System.Decimal,System.Boolean)">
	<summary>
 Add a decimal element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">decimal element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new decimal </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Object[]@,System.Object,System.Boolean)">
	<summary>
 Add a object element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">object element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new object </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.IO.FileInfo[]@,System.IO.FileInfo,System.Boolean)">
	<summary>
 Add a fileinfo element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">object element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new object </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(Microsoft.VisualBasic.Collection[]@,Microsoft.VisualBasic.Collection,System.Boolean)">
	<summary>
 Add a object element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">Collection element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new object </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Collections.Hashtable[]@,System.Collections.Hashtable,System.Boolean)">
	<summary>
 Add a object element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">HashTable element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new object </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Data.DataColumn[]@,System.Data.DataColumn,System.Boolean)">
	<summary>
 Add a object element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">DataColumn element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new DataColumn </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Data.DataRow[]@,System.Data.DataRow,System.Boolean)">
	<summary>
 Add a datarow  element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">DataColumn element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new DataColumn </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayAppend(System.Windows.Forms.Control[]@,System.Windows.Forms.Control,System.Boolean)">
	<summary>
 Add a control element at the last of an array
 </summary>
	<param name="ArrayName"> Array to be added</param>
	<param name="LastValue">Control element added at last position </param>
	<param name="IgnoreIfExists">Ignore if item already exists in the array</param>
	<returns> Output array after adding new control </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayFind(System.String[],System.String,System.Boolean)">
	<summary>
 Get index no of an element of an array 
 </summary>
	<param name="ArrayToSearch">Array of string to searched</param>
	<param name="Element">Element to be searched in the above array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayCollectionFind(Microsoft.VisualBasic.Collection[],System.String,System.String,System.Int32)">
	<summary>
 Get collection from an array collection. 
 </summary>
	<param name="ArrayCollection">Array of string to searched</param>
	<param name="KeyName">KeyName of collection</param>
	<param name="KeyValue">Key value to find in array collection</param>
	<returns>Collection matched for keyname=keyvalue</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayCollectionFind(Microsoft.VisualBasic.Collection[],System.String,System.Object,System.Int32)">
	<summary>
 Get collection from an array collection. 
 </summary>
	<param name="ArrayCollection">Array of string to searched</param>
	<param name="KeyName">KeyName of collection</param>
	<param name="KeyValue">Key value to find in array collection</param>
	<returns>Collection matched for keyname=keyvalue</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayFind(System.Int32[],System.Int32)">
	<summary>
 Get index no of an element of an array
 </summary>
	<param name="ArrayToSearch"></param>
	<param name="Element">Element to be searched in the above array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayFind(System.Decimal[],System.Decimal)">
	<summary>
 Get index no of an element of an array
 </summary>
	<param name="ArrayToSearch"></param>
	<param name="Element">Element to be searched in the above array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayFind(System.Object[],System.Object)">
	<summary>
 Get index no of an element of an array
 </summary>
	<param name="ArrayToSearch"></param>
	<param name="Element">Element to be searched in the above array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.QuitError(System.Exception,Microsoft.VisualBasic.ErrObject,System.String)">
	<summary>
 Error Message box before quitting the application
 </summary>
	<param name="ex">Error on exception </param>
	<param name="err"> error object </param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.QuitMessage(System.String,System.String)">
	<summary>
 Message box before quitting the application
 </summary>
	<param name="MessageString"> message as string</param>
	<param name="QuitProcedure">Function or sunroutine name from exception thrown</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.DateTostring(System.DateTime,System.String,System.String@)">
	<summary>
 To convert date to string as per given format
 </summary>
	<param name="InputDate"> Date to be converted</param>
	<param name="DateFormat ">Custom date format,eg "dd/MM/yyyy" </param>
	<param name="DisplayDate "> display date as string in above custome format</param>
	<returns>String output the the format "yyyyMMdd" </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetDosFileName(System.String,System.Int32)">
	<summary>
 Get dos file name from input string name
 </summary>
	<param name="LName"> Input string to be converted to dos file name</param>
	<param name="LSize">Size of dos file name</param>
	<returns>Output file name</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWrite(System.String,System.String,System.Boolean)">
	<summary>
 Write string to a file
 </summary>
	<param name="TxtFile">Output full file name </param>
	<param name="TxtString">Sring to be written</param>
	<param name="AddLast">True,if string is added to an existing file </param>
	<returns> string to be written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWrite(System.IO.FileStream@,System.String)">
	<summary>
 Write string to a file
 </summary>
	<param name="LFileStream">FileStream as already defined</param>
	<param name="TxtString">Text String to be written</param>
	<returns>Text string has been written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWriteLine(System.String,System.String[],System.Boolean)">
	<summary>
 Write string to a file
 </summary>
	<param name="TxtFile">Output full file name </param>
	<param name="TxtString">Array of text lines to be written</param>
	<param name="AddLast">True,if string is added to an existing file </param>
	<returns> string to be written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWriteAllLines(System.String,System.String[],System.Text.Encoding,System.Boolean)">
	<summary>
 Write string to a file
 </summary>
	<param name="TxtFile">Output full file name </param>
	<param name="TxtString">Array of text lines to be written</param>
	<param name="Mencoding">Text Format as system.text.encoding</param>
	<param name="AddLast">True,if string is added to an existing file </param>
	<returns> string to be written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWriteLine(System.IO.FileStream@,System.String[])">
	<summary>
 Write string to a file
 </summary>
	<param name="LFileStream">FileStream as already defined</param>
	<param name="TxtString">Array of text lines to be written</param>
	<returns>Text string has been written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWriteLine(System.IO.StreamWriter@,System.Collections.Generic.List{System.String})">
	<summary>
 Write string to a file
 </summary>
	<param name="LStreamWriter">StreamWriter  already defined</param>
	<param name="TxtList">List  of text lines to be written</param>
	<returns>Text string has been written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringWriteLine(System.IO.StreamWriter@,System.String)">
	<summary>
 Write string to a file
 </summary>
	<param name="LStreamWriter">StreamWriter  already defined</param>
	<param name="TxtLine">Text line to be written</param>
	<returns>Text string has been written</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringRead(System.String)">
	<summary>
 Read  contents of a file into string
 </summary>
	<param name="TxtFile">Full file name to be read </param>
	<returns> String as output</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringReadLine(System.String)">
	<summary>
 Read  line contents of a file into string array
 </summary>
	<param name="TxtFile">Full file name to be read </param>
	<returns> String as output</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringReadAllLines(System.String,System.Text.Encoding)">
	<summary>
 Read  line contents of a file into string array
 </summary>
	<param name="TxtFile">Full file name to be read </param>
	<param name="mEncoding">Text Encoding Format eg. utf-8</param>
	<returns> String as output</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.StringReadLine(System.IO.FileStream)">
	<summary>
 Read  line contents of a file into string array
 </summary>
	<param name="LFileStream"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetHashTableFromString(System.String,System.String,System.String)">
	<summary>
 Convert string layout (key1=val1~key2=val2~key3=val3) into hashtable object
 </summary>
	<param name="InputString">Input string of hashtable layout eg .key1=val1~key2=val2~key3=val3</param>
	<param name="VarHook"> Hashtable Keys separator</param>
	<param name="ValHook">Separator of key and its value</param>
	<returns> Hash Table object</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetHashTableFromKeys(System.Collections.Hashtable,System.String[])">
	<summary>
 Create a new HashTable by filtering a MainHashTable on an array of keys already exist in MainHashTable.
 </summary>
	<param name="MainHashTable">MainHashTable from which new hashtable extracted.</param>
	<param name="HashKeys">An array of hashkeys to be filtered.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetStringFromHashTable(System.Collections.Hashtable,System.String,System.String)">
	<summary>
 Convert hashtable object into string
 </summary>
	<param name="InputHashTable"> Input hash table object</param>
	<param name="VarHook">Separator of two hashtable keys, Default value="~" </param>
	<param name="ValHook">Separator of hashtable key and its item, Default value ="="</param>
	<returns>Output string of layout (key1=val1~key2=val2~key3=val3) </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetStringConditionFromHashTable(System.Collections.Hashtable,System.Boolean,System.Boolean,System.String)">
	<summary>
 Convert hashtable object into string
 </summary>
	<param name="InputHashTable"> Input hash table object</param>
	<param name="SqlStringFormat">Optional if True, String values are converted with single quotes otherwise with double quotes.</param>
	<param name="EqualOperator"> true  is  = or false in not =  </param>
	<param name="LogicGate">Logic gate placed between two columns default is " and "</param>
	<returns>Output string of layout (key1=val1~key2=val2~key3=val3) </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetServerDataBase(System.String,System.String)">
	<summary>
 Get ServerDatabase from globalcontrol hashtable by server and database keys eg. 0_srv_0 and 0_mdf_0
 </summary>
	<param name="ServerKey">eg 0_srv_0 or 1_srv_1</param>
	<param name="MdfKey">eg 0_mdf_0 or 1_mdf_1</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetValueFromHashTable(System.Collections.Hashtable,System.String,System.String)">
	<summary>
 Get Value from hash table of given key
 </summary>
	<param name="AHashTable">Hash table to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AlternateKeyName">Alternate key if first key value not found</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetKeyFromHashTable(System.Collections.Hashtable,System.Object)">
	<summary>
 Get hash table key of a given given value
 </summary>
	<param name="AHashTable">Hash table to be searched</param>
	<param name="mValue">Value to find in hash table</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.CreateHashTable(System.String,System.Object)">
	<summary>
 Create a one key hashtable.
 </summary>
	<param name="mkey">Key of item</param>
	<param name="mValue">Value of item</param>
	<returns>A new HashTable </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.CreateHashTable(System.Data.DataRow)">
	<summary>
 Create a hashtable from all columns of a datarow. Where ColumnName is key and ColumnValue is its value
 </summary>
	<param name="mRow">A DataRow which is converted into hashtable</param>
	<returns>A new HashTable </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetValueFromCollection(Microsoft.VisualBasic.Collection,System.String,System.String)">
	<summary>
 Get Value from a collection of given key
 </summary>
	<param name="ACollection">Collection to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AlternateKeyName">Alternate key if first key value not found</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetValueFromCollection(Microsoft.VisualBasic.Collection[],System.String,System.String)">
	<summary>
 Get colletion object from an array of collections by keyname and its value.
 </summary>
	<param name="ACollection">array of Collections to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AkeyValue">Key Value to be searched in array of collections</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetCollectionFromCollection(Microsoft.VisualBasic.Collection[],System.String,System.String)">
	<summary>
 Get colletion object from an array of collections by keyname and its value.
 </summary>
	<param name="ACollection">array of Collections to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AkeyValue">Key Value/comma separated keyvalues  to be searched in array of collections</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetValueFromCollection(Microsoft.VisualBasic.Collection[],System.String,System.Int32)">
	<summary>
 Get colletion object from an array of collections by keyname and its value.
 </summary>
	<param name="ACollection">Array of Collections to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AkeyValue">Key Value to be searched in array of collections</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetValueFromHashTable(System.Collections.Hashtable[],System.String,System.Int32)">
	<summary>
 Get HashTable object from an array of HashTables by keyname and its value.
 </summary>
	<param name="AHashTable">Array of HashTables to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AkeyValue">Key Value to be searched in array of hashtable</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetValueFromHashTable(System.Collections.Hashtable[],System.String,System.String)">
	<summary>
 Get HashTable object from an array of HashTables by keyname and its value.
 </summary>
	<param name="AHashTable">Array of HashTables to be searched</param>
	<param name="AKeyName">Key name to find</param>
	<param name="AkeyValue">Key Value to be searched in array of hashtable</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetNetworkFolders(System.Windows.Forms.FolderBrowserDialog)">
	<summary>
 Get Network folder accessible to the system.
 </summary>
	<param name="oFolderBrowserDialog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SearchFiles0(System.String,System.String,System.Boolean)">
	<summary>
Return a list of string having the items of full file name matching the wildcard criteria (*.*)  
 </summary>
	<param name="SourcePath"> Path to be searched </param>
	<param name="WildCard"> wild card string such as "*.*" ,"*.dat" etc.,default value="*.* </param>
	<param name="TopLevel"> False , if searched for child folder also,default value=False</param>
	<returns>List object of fullfile name</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SearchFiles(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
Return a list of string having the items of full file name matching the wildcard criteria (*.*)  
 </summary>
	<param name="SourcePath"> Comma separated Folders or drives to be searched </param>
	<param name="SearchPattern"> wild card string such as "*.*" ,"*.dat" etc.,default value="*.* </param>
	<param name="TopLevel"> False , if searched for child folder also,default value=False</param>
	<returns>List object of fullfile name</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.BackwardFileSearching(System.String,System.String)">
	<summary>
 To backward searching of a directory path for existence of a filename. 
 </summary>
	<param name="FullPath">Full path of searching backward</param>
	<param name="FileName">File name to be searched, * wild cards are permissible </param>
	<returns>Folder name / location where seaching file exists </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.RemoveChar(System.String,System.String)">
	<summary>
 Remove character from a string
 </summary>
	<param name="InputString">Input string</param>
	<param name="RemChar"> Character to be removed</param>
	<returns>Output string</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.FullFileNameToList(System.String,System.Boolean)">
	<summary>
 Convert fullfileName into a list object '0=path(dot(.)=for current directory,1=filename,2=extension,3=DriveLetter, if ExcludeDriveLetter =True
 </summary>
	<param name="FullFileName">Full file name as string </param>
	<returns></returns>
	<remarks> List object</remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.FullFileNameToCollection(System.String)">
	<summary>
 Convert fullfileName into a collection object of three string columns keys are "folder" ,"filename","extension" . If folder value is (.) then take current directory.
 </summary>
	<param name="FullFileName">Full file name as string </param>
	<returns></returns>
	<remarks> Collection object</remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToCollection(Microsoft.VisualBasic.Collection@,System.Object,System.String)">
	<summary>
 Add an item to a collection
 </summary>
	<param name="mCollection">Collection to be added</param>
	<param name="ValueItem">Value of Item as object</param>
	<param name="keyItem">Key of Item</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToCollection(Microsoft.VisualBasic.Collection@,System.String,System.String)">
	<summary>
 Add an item to a collection
 </summary>
	<param name="mCollection">Collection to be added</param>
	<param name="ValueItem">Value of Item as string</param>
	<param name="keyItem">Key of Item</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToCollection(Microsoft.VisualBasic.Collection@,System.Int32,System.String)">
	<summary>
 Add an item to a collection
 </summary>
	<param name="mCollection">Collection to be added</param>
	<param name="ValueItem">Value of Item as integer</param>
	<param name="keyItem">Key of Item</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetFullFileName(System.Collections.Generic.List{System.String})">
	<summary>
 Get file name with extension and path from a list control  '0=path(dot(.)=for current directory,1=filename,2=extension
 </summary>
	<param name="PathNameExt"> List control of size 3  '0=path(dot(.)=for current directory,1=filename,2=extension </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetFullFileName(Microsoft.VisualBasic.Collection)">
	<summary>
 Get file name with extension and path from a collection object keys are "folder" ,"filename","extension" . If folder value is (.) then take current directory.
 </summary>
	<param name="PathNameExt"> List control of size 3  '0=path(dot(.)=for current directory,1=filename,2=extension </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.EnablePreviousControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
	<summary>
 To make previous form controls enable with respect to a controlName
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet">Comma separated string of control names ,(*) for all controls of the form</param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="EnableTrue">Enable value ,Default value =True</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetPreviousControlObject(System.Object@,System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
	<summary>
 To get previous form control as object with respect to a controlName
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet">Comma separated string of control names ,(*) for all controls of the form</param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="NoOfControls">No of control to be fetched</param>
	<param name="OnlyVisibleEnabledControls">To get the previous control as VisibleEnabled ,default is false </param>
	<returns>An array of objects </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetPreviousControlObject(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 To get previous form control as object with respect to a controlName
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet">Comma separated string of control names ,(*) for all controls of the form</param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="OnlyVisibleEnabledControls">To get the previous control as VisibleEnabled ,default is false </param>
	<returns>A Control object returned </returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetPreviousControlObject(System.Collections.Hashtable,System.String,System.String)">
	<summary>
 To get previous passed control as object with respect to a controlName
 </summary>
	<param name="PassingControls">A hash table having the controls which has passed by the user</param>
	<param name="ControlName">Control name from which previous seraching executed</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<returns></returns>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetPreviousControlObject(System.Collections.Hashtable,System.String,System.Int32,System.String,System.Boolean)">
	<summary>
 To get previous passed controls() as object with respect to a controlName
 </summary>
	<param name="PassingControls">A hash table having the controls which has passed by the user</param>
	<param name="ControlName">Control name from which previous seraching executed</param>
	<param name="NoOfControls">No. of controls returned</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<returns>An array of controls</returns>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetNextControlObject(System.Collections.Hashtable,System.String)">
	<summary>
 To get next passed control as object with respect to a controlName
 </summary>
	<param name="PassingControls">A hash table having the controls which has passed by the user</param>
	<param name="ControlName">Control name from which previous seraching executed</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToHashTable(System.Collections.Hashtable@,System.String,System.Object,System.Boolean)">
	<summary>
 To Add item in a hashtable with key and its value
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string of hashtable item</param>
	<param name="ItemValue">Item value of hash table item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToHashTable(System.Collections.Hashtable@,System.String,System.Collections.Hashtable,System.Boolean)">
	<summary>
 To Add item in a hashtable with key and its value
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string hashtable item</param>
	<param name="ItemValue">Item value of hash table item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToHashTable(System.Collections.Hashtable@,System.String,System.String,System.Boolean)">
	<summary>
 To Add item in a hashtable with key and its value
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string of hashtable item</param>
	<param name="ItemValue">Item value of hash table item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToHashTable(System.Collections.Hashtable@,System.String,System.Int32,System.Boolean)">
	<summary>
 To Add item in a hashtable with key and its value
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string of hashtable item</param>
	<param name="ItemValue">Item value of hash table item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemsToComboBox(System.Int16,System.Windows.Forms.ComboBox@)">
	<summary>
 Add items from global MasterOptions datatable
 </summary>
	<param name="OptionKey">Key of MasterOptions</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemsToRadioButtonsPanel(System.Int16,System.Windows.Forms.Panel@)">
	<summary>
 Add items from global MasterOptions datatable to radiobutton panel
 </summary>
	<param name="OptionKey">Key of MasterOptions</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemsToCheckBoxesPanel(System.Int16,System.Windows.Forms.Panel@)">
	<summary>
 Add items from global MasterOptions datatable to checkboxes panel
 </summary>
	<param name="OptionKey">Key of MasterOptions</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.AddItemToHashTable(System.Collections.Hashtable@,System.String[],System.Object[],System.Boolean)">
	<summary>
 To Add item in a hashtable with keys() and its values()
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string of hashtable item</param>
	<param name="ItemValue">Item value of hash table item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.RemoveItemFromHashTable(System.Collections.Hashtable@,System.String)">
	<summary>
 To Remove item from a hashtable with key and its value
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string of hashtable item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.RemoveItemFromHashTable(System.Collections.Hashtable@,System.String[])">
	<summary>
 To Remove item from a hashtable with keys() and  values()
 </summary>
	<param name="HashTableControl">A hash table control in which values to be added</param>
	<param name="KeyValue">Key value as string of hashtable item</param>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetNextControlObject(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 To get next form control as object with respect to a controlName
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet">Comma separated string of control names ,(*) for all controls of the form</param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="VisibleControl">To get the previous control as visible </param>
	<param name="EnabledControl">To get the previous control as enabled</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.EnableNextControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
	<summary>
 To make next form controls enable with respect to a ControlName  
 </summary>
	<param name="FormName"> Parent form</param>
	<param name="FormControlsSet">Comma separated string of control names,(*) for all controls of the form </param>
	<param name="ControlName">Control name for which next controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array.</param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="EnableTrue">Enable value ,Default value =True</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.EnableControls(System.Object@,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
 To make form controls enable
 </summary>
	<param name="FormName">Parent form , whose controls to make enable</param>
	<param name="ControlNames">Comma separated string of control names to make enable,(*) for all controls of the form</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array.</param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="EnableTrue">Enable value ,Default value =True</param>
	<param name="ExceptControls">Comma separated string of control names which are not considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.VisiblePreviousControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
	<summary>
 To make previous form controls visible with respect to a controlName  
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet"> Comma separated string of control names ,(*) for all controls of the form </param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="VisibleTrue">Visible value ,Default value =True</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.VisibleNextControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
	<summary>
 To make next form controls visible with respect to a ControlName  
 </summary>
	<param name="FormName"> Parent form </param>
	<param name="FormControlsSet"> Comma separated string of control names,(*) for all controls of the form </param>
	<param name="ControlName"> Control name from  which next controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="VisibleTrue">Visible value ,Default value =True</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.VisibleControls(System.Object@,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
 To make form controls visible
 </summary>
	<param name="LForm">Parent form , whose controls to make visible</param>
	<param name="ControlNames">Comma separated string of control names to make visible,(*) for all controls of the form</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames </param>
	<param name="VisibleTrue">Visible value ,Default value =True</param>
	<param name="ExceptControls">Comma separated string of control names which are not considered </param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SetTabIndex(System.Object@,System.String,System.String,System.Boolean,System.Int32)">
	<summary>
 To set  form controls tab index sequentially.
 </summary>
	<param name="LForm">Parent form , whose controls to make visible</param>
	<param name="ControlNames">Comma separated string of control names to make visible,(*) for all controls of the form</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames </param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SendToBackNextControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
 To SendToBack() overlaping next controls in z-order.  
 </summary>
	<param name="FormName"> Parent form </param>
	<param name="FormControlsSet"> Comma separated string of control names,(*) for all controls of the form </param>
	<param name="ControlName"> Control name from  which next controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.BringToFrontNextControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
 To BringToFront() overlaping next controls in z-order.  
 </summary>
	<param name="FormName"> Parent form </param>
	<param name="FormControlsSet"> Comma separated string of control names,(*) for all controls of the form </param>
	<param name="ControlName"> Control name from  which next controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.BringToFrontControls(System.Object@,System.String,System.String,System.Boolean)">
	<summary>
 To BringToFront() overlaping controls in z-order.  
 </summary>
	<param name="FormName"> Parent form </param>
	<param name="FormControlsSet"> Comma separated string of control names,(*) for all controls of the form </param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SentToBackControls(System.Object@,System.String,System.String,System.Boolean)">
	<summary>
 To SentToBack() overlaping controls in z-order.  
 </summary>
	<param name="FormName"> Parent form </param>
	<param name="FormControlsSet"> Comma separated string of control names,(*) for all controls of the form </param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SentToBackPreviousControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
   To SendToBack() overlaping previous controls in z-order.  
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet"> Comma separated string of control names ,(*) for all controls of the form </param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.BringToFrontPreviousControls(System.Object@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
   To SendToBack() overlaping previous controls in z-order.  
 </summary>
	<param name="FormName">Parent forms</param>
	<param name="FormControlsSet"> Comma separated string of control names ,(*) for all controls of the form </param>
	<param name="ControlName">Control name for which previous controls are to be  considered</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence,""=As in control array. </param>
	<param name="OnlyTopLevel">False,If also executed for child controls of controlnames</param>
	<param name="IncludeCurrentControl ">True if above control name included in visible controls list</param>
	<param name="ExceptControls">Comma separated string of control names which are not to be considered</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetAllControlNames(System.Object,System.String,System.Boolean,System.String)">
	<summary>
 Get all control names of a form as a string separated by sep0 default(",")
 </summary>
	<param name="lform"> Parent form</param>
	<param name="ControlSequence">Sequence of controls in the string, "T" =As per TabIndex,"L"=As per Location,"R"=As per Rectangle Sequence.</param>
	<param name="OnlyTopLevel"> Included only top level controls ,Default value=False </param>
	<param name="Sep0"> Control name's separator default is "," </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ControlNameToObject(System.Object,System.String,System.String@)">
	<summary>
 Get the object/control of the form  by its name (string)  
 </summary>
	<param name="lform"> Parent form of the object / control </param>
	<param name="ControlName"> Name of control or object as string</param>
	<param name="TypeOfControlName">Output as control type,F=Form,C=Control,V=Form variables,E=External variables</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.MakeControlSize(System.String,System.Windows.Forms.Control@)">
	<summary>
 To change control  size for active font accoarding to  Text string.  
 </summary>
	<param name="TextString"> Largest text string to be fitted in the control</param>
	<param name="LControl"> Control-which size to be changed</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.EvalNumericExpression(System.String,System.Boolean@)">
	<summary>
 To evalute an numeric expression entered in text string
 </summary>
	<param name="NumericExpression">Text String of numeric expression </param>
	<param name="ErrorInExpression">Stores true if an error in found in numeric expression</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.EvaluateExpression(System.String,System.Boolean@)">
	<summary>
 To evalute an numeric expression entered in text string
 </summary>
	<param name="ExpressionString">Text String of numeric expression </param>
	<param name="ErrorInExpression">Stores true if an error in found in expression</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.EvaluateBooleanExpression(System.String,System.Boolean@)">
	<summary>
 To evalute an numeric expression entered in text string
 </summary>
	<param name="ExpressionString">Text String of numeric expression </param>
	<param name="ErrorInExpression">Stores true if an error in found in expression</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SortCollection(Microsoft.VisualBasic.Collection[],System.String,System.String)">
	<summary>
 This function sorts an array of collection on a column specified
 </summary>
	<param name="Lcollection">An array of collection to be sorted</param>
	<param name="SortColumnKey">Key of collection column on which sorting done</param>
	<param name="SortOrder">Order of sorting ASC or DESC,Default is ASC</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SortCollection(Microsoft.VisualBasic.Collection[],System.String[],System.String)">
	<summary>
 This function sorts an array of collection on a column specified
 </summary>
	<param name="Lcollection">An array of collection to be sorted</param>
	<param name="SortColumnKeys">An Array of Keys of collection on which sorting done</param>
	<param name="SortOrder">Order of sorting ASC or DESC,Default is ASC</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ConvertHashTableToArrays(System.Collections.Hashtable,System.String[]@,System.Object[]@)">
	<summary>
 Convert hashtable to two same size arrays i.e keyaray and value array
 </summary>
	<param name="LHashTable">Hashtable to be converted </param>
	<param name="KeysArray">Array contains the keys of hashtable</param>
	<param name="ValuesArray">Array contains the values of hashtable</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ConvertTwoArraysToHashTable(System.String[],System.Object[])">
	<summary>
 Convert two same size arrays to hash table,where first array has unique values
 </summary>
	<param name="FirstArray">First string array to be used as key of hashtable</param>
	<param name="SecondArray">Second object array to be used as value of hashtable</param>
	<returns>New hash table</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrink(System.Object[],System.Int32)">
	<summary>
 Remove item from array at specified Index and shrink
 </summary>
	<param name="ArrayName">An array of object to be shrink</param>
	<param name="ItemIndex">Index no. to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrink(System.String[],System.Int32)">
	<summary>
 Remove item from array at specified Index and shrink
 </summary>
	<param name="ArrayName">An array of string to be shrink</param>
	<param name="ItemIndex">Index no. to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrink(System.String[],System.Int32[])">
	<summary>
 Remove item from array at specified Index and shrink
 </summary>
	<param name="ArrayName">An array of string to be shrink</param>
	<param name="ItemIndex">Array of Indexes  to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayNew(System.String[],System.Int32[])">
	<summary>
 Create a new array from a given array.
 </summary>
	<param name="ArrayName">An array of string be given</param>
	<param name="ItemIndex">Array of Indexes  which will be elements of new array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrink(System.Int32[],System.Int32)">
	<summary>
 Remove item from array at specified Index and shrink
 </summary>
	<param name="ArrayName">An array of integer to be shrink</param>
	<param name="ItemIndex">Index no. to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrink(System.Decimal[],System.Int32)">
	<summary>
 Remove item from array at specified Index and shrink
 </summary>
	<param name="ArrayName">An array of decimal/numeric to be shrink</param>
	<param name="ItemIndex">Index no. to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.Object[],System.Object)">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValue">Item value to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.Object[],System.Object[])">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValues">Item values array  to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.String[],System.String)">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValue">Item value to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.String[],System.String[])">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValues">Array of item values removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.Decimal[],System.Decimal)">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValue">Item value to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.Decimal[],System.Decimal[])">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValues">Item values array to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.Int32[],System.Int32)">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValue">Item value to be removed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ArrayShrinkByValue(System.Int32[],System.Int32[])">
	<summary>
Remove item from array by specifying item value and shrink
 </summary>
	<param name="ArrayName">Array to be shrinked</param>
	<param name="ItemValue">Array of Item Values </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.SetCommonPropertyValue(System.Object@,System.String,System.String,System.Object)">
	<summary>
 To Set a common value to a property to specified controls.  
 </summary>
	<param name="FormName"> Parent form </param>
	<param name="FormControlsSet"> Comma separated string of control names,(*) for all controls of the form </param>
	<param name="PropertyName ">Property name which is set </param>
	<param name="PropertyValue ">Property Value which to be set</param>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.BytesToImage(System.Byte[])">
	<summary>
 To convert bytes array into Image 
 </summary>
	<param name="BytesArray">Bytes array to be converted</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ImageToBytes(System.Drawing.Image,System.String)">
	<summary>
 To convert Image into bytes array
 </summary>
	<param name="LImage">Image to be converted</param>
	<param name="PictureType">Image type as string eg jpeg,png,ico,bmp,gif,tiff</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ConvertFiguresInToWords(System.Decimal,System.String,System.String,System.String,System.Int32,System.String)">
	<summary>
 Convert decimal numerics in to words 
 </summary>
	<param name="InputNumber">Input decimal value to be converted into words</param>
	<param name="CurrencyName">Currency name in words eg. "Rupees" </param>
	<param name="FractionName">Name of fraction of currency eg. "Paise"</param>
	<param name="CurrencyPosition">Position of currency prefix or suffix</param>
	<param name="DigitsAfterDecimal ">Digits after decimal eg. 2</param>
	<param name="FigureToWordsSystem">indian or british</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ReplaceValuesInExpression(System.String,System.Collections.Hashtable,System.String)">
	<summary>
 Replace values into expression containing the elements such as @Var1,@Var2,@var3 etc. within the expression from a hashtable values with keys var1,var2,var3..
 </summary>
	<param name="ExpressionString">String Expression containing the elements such as @Var1,@Var2,@var3 etc.</param>
	<param name="Variables">A hashtable object with keys var1,var2,var3 etc. and its values only numerics,strings and datetime are acceptable.</param>
	<param name="StringFormat">Optional ,Permissible values SQL,VB,None, SQL=String values are enclosed in single quotes ,VB=String values enclosed in double quotes,None=String values without quotes.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.ExtractVariables(System.String,System.Boolean,System.String)">
	<summary>
 Extract variables as string array from an expression . 
 </summary>
	<param name="Expression">Expression as string having constants,variables,operators</param>
	<param name="NumericExpression">True if it is a numeric expression.</param>
	<param name="StartLetter">Start letter to prefix on variable to define , default is @</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.IsDataRowEmpty(System.Data.DataRow)">
	<summary>
 Check wether a datarow has all fields empty.
 </summary>
	<param name="LDataRow">DataRow to be checked</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.CountNetworkPc">
	<summary>
 Count pc 's on network
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetIPAddress(System.String)">
	<summary>
 Get IP address of a computer name
 </summary>
	<param name="CompName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.CheckNetworkConnection">
	<summary>
 Check network connection on a computer
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.CheckNetworkPC(System.String)">
	<summary>
 Check a pcname, wether it is on the network or not.
 </summary>
	<param name="PCName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.DownloadFileFromNetwork(System.String,System.String)">
	<summary>
 Download file from network.
 </summary>
	<param name="SourceFile"></param>
	<param name="DestinationFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.UploadFileOnNetwork(System.String,System.String)">
	<summary>
 Upload file on network.
 </summary>
	<param name="SourceFile"></param>
	<param name="DestinationFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.FormattedValue(System.Object,System.String,System.Data.DataTable,System.Collections.Hashtable)">
	<summary>
 To Convert a value in a formatted string or get value from DtMasterOptions or evaluate an expression
 </summary>
	<param name="mValue">Value to </param>
	<param name="mFormatString"></param>
	<param name="DtMasterOptions"></param>
	<param name="PublicVariables"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.GetMasterOptionsValue(System.String,System.Data.DataTable)">
	<summary>
 Get Option Value as string from  MasterOptions datatable ,input string is MasterOption_key~Index,Conversion code "AFV0"
 </summary>
	<param name="KeyOfValuesAndIndex"> String type value as MasterOption_key~Index </param>
	<returns>String correspnding to Index in MasterOption_key row of MasterOptions datatable</returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.CheckInternetConnection(System.Int16)">
	<summary>
 Check Internet connection on a default port 80
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:GlobalFunction1.GlobalFunction1.DecimalToString(System.Decimal,System.String)">
	<summary>
 Convert a decimal value in to a comma separated grouped value.
 </summary>
	<param name="NumericValue">Numeric value as decimal</param>
	<param name="NumericFormat">NumericFormat as ##,##,###.##</param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>